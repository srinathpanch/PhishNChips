import { Component } from '@angular/core';
import {
  IonicPage,
  NavController,
  NavParams,
  ActionSheetController,
  Platform
} from 'ionic-angular';
import { PhotoProvider } from '../../providers/photo/photo';
<<<<<<< Updated upstream

=======
import { Camera, CameraOptions } from '@ionic-native/camera';
import { Base64 } from '@ionic-native/base64';

import { HttpClient } from '@angular/common/http';
import { Headers, RequestOptions } from '@angular/http';
import { PhotoLibrary } from '@ionic-native/photo-library';
import { ImagePicker, OutputType } from '@ionic-native/image-picker';
>>>>>>> Stashed changes
/**
 * Generated class for the QuestionAddAnswerPage page.
 *
 * See https://ionicframework.com/docs/components/#navigation for more info on
 * Ionic pages and navigation.
 */

@IonicPage()
@Component({
  selector: 'page-question-add-answer',
  templateUrl: 'question-add-answer.html'
})
export class QuestionAddAnswerPage {
<<<<<<< Updated upstream
=======

  public base64Image : string;

  url = "http://34.238.153.148:8000/api/v1/image/upload";


>>>>>>> Stashed changes
  questionOptionList = [
    {
      title: 'Geography'
    },
    {
      title: 'Math'
    },
    {
      title: 'Chemistry'
    },
    {
      title: 'Physics'
    },
    {
      title: 'History'
    },
    {
      title: 'Informatics'
    }
  ];

  answer = {
    image: '',
    question: ''
  };
  answerModel = {
    image: '',
    question: ''
  };
  isAnswerSentSuccessfully = false;
  constructor(
    public navCtrl: NavController,
    public navParams: NavParams,
    private actionSheetCtrl: ActionSheetController,
    private platform: Platform,
<<<<<<< Updated upstream
    private photoProvider: PhotoProvider
  ) {
=======
    private photoProvider: ImagePicker,
    private base64Provider: Base64,
    private camera: Camera,
    public http:HttpClient
  ) {

  this.addImage();
  }

 

  upload() {
>>>>>>> Stashed changes
    this.clearForm();
  }

<<<<<<< Updated upstream
=======
  startCamera() {
    var options: CameraOptions = {
      quality: 50,
      destinationType: this.camera.DestinationType.DATA_URL,
      encodingType: this.camera.EncodingType.JPEG,
      mediaType: this.camera.MediaType.PICTURE
    }

    this.camera.getPicture(options).then((imageData) => {
      // imageData is either a base64 encoded string or a file URI
      // If it's base64 (DATA_URL):
      //this.base64Image = 'data:image/jpeg;base64,' + imageData;
      this.base64Image = imageData;
      // console.log(base64Image);

      this.upload_seb();

     }, (err) => {
      // Handle error
     });

  }

  upload_seb() {
    let headers = new Headers({ 'Content-Type': 'application/octet-stream' });
    let options = new RequestOptions({ headers: headers });

    var header = { "headers": {"Content-Type": "application/octet-stream"} };

    return new Promise((resolve, reject) => {
      this.http.post(this.url, this.base64Image, header)
      .toPromise()
      .then((response) =>
      {

        this.clearForm();
        this.isAnswerSentSuccessfully = true;

      })
      .catch((error) =>
      {


    this.clearForm();
    this.isAnswerSentSuccessfully = true;
      });
    });
}


>>>>>>> Stashed changes
  ionViewDidLoad() {
    console.log('ionViewDidLoad QuestionAddAnswerPage');
  }

  addImage() {
    let actionSheet = this.actionSheetCtrl.create({
      title: 'Add a picture',
      buttons: [
        {
          text: 'Use Camera',
          icon: !this.platform.is('ios') ? 'camera' : null,
          handler: () => {
            console.log('Add Camera: Use Camera clicked');
            this.startCamera();
          }
        },
        {
          text: 'Add from Library',
          icon: !this.platform.is('ios') ? 'images' : null,
          handler: () => {
            console.log('Add Camera: Add from Library clicked');

          let options = {
              maximumImagesCount: 1,
              outputType: 1,
              DATA_URI:1
            };

            this.photoProvider.getPictures(options)
              .then((imageData) => {
                console.log(imageData[0]);
                this.base64Image =  imageData[0]
                console.log(this.base64Image);
                this.upload_seb();
          }
        );
      }
        },
        {
          text: 'Cancel',
          icon: !this.platform.is('ios') ? 'close' : null,
          role: 'cancel',
          handler: () => {
            console.log('Add photo: Cancel clicked');
          }
        }
      ]
    });

    actionSheet.present();
  }

  upload() {
    let answer = this.answer;
    this.clearForm();
    this.isAnswerSentSuccessfully = true;

    setTimeout(() => {
      let currentIndex = this.navCtrl.getActive().index;
      this.navCtrl.push('QuestionCorrectAnswerPage', { answer }).then(() => {
        this.navCtrl.remove(currentIndex);
      });
    }, 2000);
  }

  clearForm() {
    this.answer = Object.create(this.answerModel);
    this.isAnswerSentSuccessfully = false;
  }
}
